set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?grep
?subset
colnames(trainging)
?subset
colnames(training)
vars <- colnames(training)
?grep
cols <- subset(training, grepl("^IL", vars))
names(cols)
cols <- grepl("^IL", vars)
cols
cols <- grep("^IL", vars)
cols
training_sub <- training[,c(1,cols)]
names(training_sub)
prep <- preProcess(training, method = "pca", thresh = .9)
?preProcess
training_sub <- training[,cols)]
training_sub <- training[,cols]
prep <- preProcess(training_sub, method = "pca", thresh = .9)
prep
training_sub <- training[,c(1,cols)]
?train
model1 <- train(training_sub[,-1], training_sub[,1], method= "glm")
model1
preproc <- preProcess(trainingsub[,-1], method="pca", thresh = .8)
preproc <- preProcess(training_sub[,-1], method="pca", thresh = .8)
model2 <- train(preproc, training_sub[,1], method= "glm")
model2
newtrain <- colbind(training_sub[,1], preproc)
newtrain <- cbind(training_sub[,1], preproc)
preproc
names(preproc)
model2 <- train(training_sub$diagnosis ~., method= "glm", data = preproc)
head(training_sub[,-1])
training_sub <- training[,c(1,cols)]
head(training_sub)
preproc <- preProcess(training_sub[,-1], method="pca", thresh = .8)
preproc
model2 <- train(training_sub$diagnosis ~., method= "glm", data = preproc)
preproc <- preProcess(training_sub[,-1], method="pca", pcaComp=7)
preproc
str(preproc)
model2 <- train(training_sub$diagnosis ~ ., method= "glm", data = preproc)
procpredict <- predict(preproc, training_sub[,-1])
procpredict
?predict
model2 <- train(training_sub$diagnosis ~ ., method= "glm", data = procpredict)
testing_sub <- testing[,c(1,cols)]
testprocpredict <- predict(preproc, testing_sub[,-1])
confusionMatrix(testing_sub[,1],predict(model2, testprocpredict) )
confusionMatrix(testing_sub[,1],predict(model1, testing_sub) )
predict(model1, testing_sub)
x <- c(2, 4, 8, 6)
y <- c(3, 5, 7, 11, 13)
x <- c(1, 3, 5, 7, 9, 11, 13)
y %in% x
x %in% y
z <- c(1, 1, 5, 7, 3, 7, 13)
x %in% z
z %in% x
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
model <- lm(y~x)
model
summary(model)
anova(model)
mtcars
model <- lm(mpg~wt, mtcars)
model
?predict
predict(model, mean(mtcars$wt), interval="prediction"")
)
predict(model, mean(mtcars$wt), interval="prediction")
mean(mtcars$wt)
ave <- mean(mtcars$wt)
predict(model, ave, interval="prediction")
model <- lm(mtcars$mpg~mtcars$wt)
predict(model, ave, interval="prediction")
?mtcars
model2 <- lm(mpg~wt-1, mtcars)
model1
anova(model1)
anova(model2)
summary(model2)
model <- lm(mtcars$mpg~mtcars$wt)
summary(model)
anova(model)
model <- lm(mpg~wt, mtcars)
data <- data.frame(wt = mean(mtcars$wt))
predict(model, newdata = data, interval = "predict")
data
predict(model, newdata = data, interval = "confidence")
data <- data.frame(wt = 3)
predict(model, newdata = data, interval = "confidence")
predict(model, newdata = data, interval = "prediction")
?confint
confint(model,level = .95)
6.486*2
?rattle
data(iris)
library(ggplot2)
partition <- createDataPartition(iris$Species, p = .6, list=F)
library(caret)
partition <- createDataPartition(iris$Species, p = .6, list=F)
training <- iris[partition,]
testing <- iris[-partition,]
dim(testing)
dim(training)
qplot(Petal.Width, Sepal.Width, color=Species, data=training)
model <- train(Species~., method="rpart", data=training)
model
names(model)
summary(model)
str(model)
model$finalModel
qplot(model$finalModel)
plot(model$finalModel)
?text
text(model$finalModel, use.n=T, all=T)
text(model$finalModel, use.n=T, all=T, cex=.8)
plot(model$finalModel, uniform=T)
text(model$finalModel, use.n=T, all=T, cex=.8)
library(rattle)
install.packages(rattle)
install.packages("rattle")
library(rattle)
fancyPpartPlot(model$finalModel)
fancyRpartPlot(model$finalModel)
RpartPlot(model$finalModel)
library(rattle)
fancyRpartPlot(model$finalModel)
rattle.fancyRpartPlot(model$finalModel)
fancyRpartPlot(model$finalModel)
fancyRpartPlot(model)
predict(model, newdata=testing)
predictions <- predict(model, newdata=testing)
confusionMatrix(predictions, training$Species)
confusionMatrix(predictions, testing$Species)
data(mtcars)
model <- lm(mpg ~ wt + cyl, mtcars)
summary(model)
levels(mtcars$cyl)
names(mtcars$cyl)
unique(mtcars$cyl)
str(mtcars)
model <- lm(mpg ~ wt + as.factor(cyl), mtcars)
model
data(mtcars)
data(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
model <- lm(mpg ~ wt + cyl, mtcars)
model
summary(model)
model2 <- lm(mpg ~ cyl, mtcars)
model2
model
model3 <- lm(mpg ~ cyl*wt, mtcars)
model3
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?dfbeta
modelxy <- lm(y~x)
hatvalues(modelxy)
dfbeta(modelxy)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
modelxy <- lm(y~x)
hatvalues(modelxy)
dfbeta(modelxy)
View(mtcars)
hat(modelxy)
predict(modelxy, x)
?predict
?predict.lm
predict(modelxy, newdata = x)
predict(modelxy, newdata = data.frame(x))
predictvals <- predict(modelxy, newdata = data.frame(x))
mtcars$cyl <- factor(mtcars$cyl)
str(mtcars$cyl)
anova(model, model3)
model4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(model4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
modelxy <- lm(y~x)
dfbeta(modelxy)
?influence.measures
influence.measures(modelxy)
anova(model, model3)
anov <- anova(model, model3)
summary(anov)
boxplot(mpg ~ am, mtcars)
t.test(mpg ~ am, mtcars)
model1 <- lm(mpg ~ am, mtcars)
plot(mtcars$am, residuals(model1))
model_all <- lm(mpg ~ ., mtcars)
model_all
data(mtcars)
dim(mtcars)
dim(mtcars)[1]
dim(mtcars)[[1]]
mtcars[1]
mtcars[[1]]
mtcars[[1]][1]
mtcars[[1]][[1]]
mtcars[[1]][7]
mtcars[1][7]
mtcars[1][2]
mtcars[1]
mtcars[, 1]
dim(mtcars)[1]
dim(mtcars)[1]
?sample
counts(mtcars$am)
count(mtcars$am)
table(mtcars$am)
model_wtandam <- lm(mpg ~ wt*am, mtcars)
plots(model_wtandam)
plot(model_wtandam)
plot(model_wtandam)
par(mfrow(2,2))
par(mfrow= c(2,2))
plot(model_wtandam)
plot(model_wtandam)
par(mar = rep(2, 4))
plot(model_wtandam)
par(mfrow= c(0))
par(mfrow= c(1,1))
plot(model_wtandam)
par(mar = rep(4, 4))
plot(model_wtandam)
training_full <- read.csv("training_full.csv")
validation <- read.csv("validation.csv")
##downloads the "testing" and "training" datasets.
training_full <- read.csv("training_full.csv")
validation <- read.csv("validation.csv")
setwd("~/R/RFiles/MachineLearning")
training_full <- read.csv("training_full.csv")
validation <- read.csv("validation.csv")
library(caret)
intrain <- createDataPartition(training_full$classe, p = .60, list = F)
training <- training_full[intrain, ]
testing <- training_full[-intrain, ]
set.seed(91660)
library(rpart)
treeMod <- train(classe ~ ., method = "rpart", data = training,
trControl = trainControl(method = "cv", number = 15))
plot(treeMod, uniform=T)
plot(treeMod$modelFit, uniform=T)
plot(treeMod$finalModel, uniform=T)
text(treeMod$finalModel, use.n = T, all = T, cex = .8)
plot(treeMod$finalModel, uniform=T)
plot(treeMod$finalModel, uniform=T)
text(treeMod$finalModel, use.n = T, all = T, cex = .8)
library(Rattle)
library(rattle)
rattle()
fancyRpartPlot(treeMod$finalModel)
fancyRpart(treeMod$finalModel)
treeMod$finalModel
names(treeMod)
names(treeMod)[1]
names(treeMod)[[1]]
treeMod[[1]]
treeMod[[2]]
names(treeMod)
treeMod[[5]]
treeMod[[4]]
treeMod[[9]]
?confusionMatrix
confusionMatrix(treeMod)
treeMod[[2]]
names(treeMod)
treeMod[[11]]
treeMod2 <- train(classe ~ ., method = "rpart", data = training,
trControl = trainControl(method = "cv", number = 7))
confusionMatrix(treeMod2)
treeMod2[[11]]
treeMod3 <- train(classe ~ ., method = "rpart", data = training,
trControl = trainControl(method = "cv", number = 5))
names(treeMod2)
treeMod2$finalModel
confusionMatrix(treeMod3)
treeMod3$finalModel
confusionMatrix(treeMod3)
names(treeMod3)
treeMod3[[1]]
treeMod3[[2]]
treeMod3[[3]]
treeMod3[[4]]
treeMod2[[4]]
treeMod[[4]]
treeMod3[[5]]
?predict
rpPredict <- predict(treeMod3, newdata = testing)
confusionMatrix(rpPredict)
rpPredict
confusionMatrix(rpPredict,testing$classe)
dim(rpPredict)
rpPredict
str(rpPredict)
summary(rpPredict)
7846/5
names(training)
treeModPrime <- train(classe ~ , method = "rpart", data = training[,-c(1:5)],
trControl = trainControl(method = "cv", number = 5))
treeModPrime <- train(classe ~ ., method = "rpart", data = training[,-c(1:5)],
trControl = trainControl(method = "cv", number = 5))
confusionMatrix(treeModPrime)
treeModPrime$finalModel
names(treeModPrime)
treeModPrime$modelInfo
names(treeModPrime)
treeModPrime$results
treeModPrime <- train(classe ~ ., method = "rpart", data = training[,-c(2:5)],
trControl = trainControl(method = "cv", number = 5))
confusionMatrix(treeModPrime)
treeModPrime$finalModel
treeModPrime$results
treeModPrime <- train(classe ~ ., method = "rpart", data = training[,-1],
trControl = trainControl(method = "cv", number = 5))
confusionMatrix(treeModPrime)
treeModPrime$finalModel
treeModPrime$results
treeModPrime <- train(classe ~ ., method = "rpart", data = training[,-1],
trControl = trainControl(method = "cv", number = 15))
confusionMatrix(treeModPrime)
treeModPrime$finalModel
treeModPrime$results
getTree(treeModPrime)
getTree(treeModPrime$finalModel)
?getTree
training_full <- read.csv("training_full.csv", na.strings= c("", " ", "na", "Na", "NA")
validation <- read.csv("validation.csv", na.strings= c("", " ", "na", "Na", "NA"))
training_full <- read.csv("training_full.csv", na.strings= c("", " ", "na", "Na", "NA"))
validation <- read.csv("validation.csv", na.strings= c("", " ", "na", "Na", "NA"))
lapply(training_full, function(x) {length(which(is.na(x))))}
lapply(training_full, function(x) {length(which(is.na(x)))}
)
training_full$skewness_yaw_belt
training_full <- read.csv("training_full.csv", na.strings= c("", " ", "na", "Na", "NA", "#DIV/0!"))
validation <- read.csv("validation.csv", na.strings= c("", " ", "na", "Na", "NA", "#DIV/0!"))
lapply(training_full, function(x) {length(which(is.na(x)))})
?which
sapply(training_full, function(x) {length(which(is.na(x)))})
na_vars <- sapply(training_full, function(x) {length(which(is.na(x)))})
class(na_vars)
str(na_vars)
training_full_lean <- training_full(,na_vars>0)
training_full_lean <- training_full[,na_vars>0]
str(training_full_lean)
training_full_lean <- training_full[ , na_vars<0 ]
training_full_lean
training_full_lean <- training_full[ , na_vars < 500 ]
training_full_lean <- training_full[ , na_vars < 1000 ]
str(training_full_lean)
training_full_lean$ gyros_dumbbell_x
str(training_full_lean)
intrain <- createDataPartition(training_full$classe, p = .60, list = F)
training <- training_lean[intrain, ]
testing <- training_lean[-intrain, ]
na_vars <- sapply(training_full, function(x) {length(which(is.na(x)))})
training_lean <- training_full[ , na_vars < 1000 ]
validation <- training_full[ , na_vars < 1000 ]
intrain <- createDataPartition(training_lean$classe, p = .60, list = F)
training <- training_lean[intrain, ]
testing <- training_lean[-intrain, ]
training_full <- read.csv("training_full.csv", na.strings= c("", " ", "na", "Na", "NA", "#DIV/0!"))
validation <- read.csv("validation.csv", na.strings= c("", " ", "na", "Na", "NA", "#DIV/0!"))
na_vars <- sapply(training_full, function(x) {length(which(is.na(x)))})
training_lean <- training_full[ , na_vars < 1000 ]
validation <- training_full[ , na_vars < 1000 ]
validation <- validation[ , na_vars < 1000 ]
validation <- read.csv("validation.csv", na.strings= c("", " ", "na", "Na", "NA", "#DIV/0!"))
validation <- validation[ , na_vars < 1000 ]
library(caret)
intrain <- createDataPartition(training_lean$classe, p = .60, list = F)
training <- training_lean[intrain, ]
testing <- training_lean[-intrain, ]
set.seed(91660)
library(rpart)
treeMod3 <- train(classe ~ ., method = "rpart", data = training,
trControl = trainControl(method = "cv", number = 5))
confusionMatrix(treeMod3)
treeMod3$finalModel
treeMod3$results
treeMod3 <- train(classe ~ ., method = "rpart", data = training[,-1],
trControl = trainControl(method = "cv", number = 5))
confusionMatrix(treeMod3)
treeMod3$finalModel
treeMod3$results
treeMod3 <- train(classe ~ ., method = "rpart", data = training[,-1],
trControl = trainControl(method = "cv", number = 10))
confusionMatrix(treeMod3)
treeMod3$finalModel
treeMod3$results
treeMod2 <- train(classe ~ ., method = "rpart", data = training,
trControl = trainControl(method = "cv", number = 7))
confusionMatrix(treeMod2)
treeMod2$finalModel
treeMod2$results
treeMod3 <- train(classe ~ ., method = "rpart", data = training,
trControl = trainControl(method = "cv", number = 5))
rtPredict <- predict(treeMod2, testing)
rtPredict
confusionMatrix(rtPredict)
confusionMatrix(rtPredict, testing[,60])
rfMod <- train(classe ~ ., method = "rf", data = training,
trControl = trainControl(method = "cv", number = 15), prox = T)
training_full <- read.csv("training_full.csv", na.strings= c("", " ", "na", "Na", "NA", "#DIV/0!"))
validation <- read.csv("validation.csv", na.strings= c("", " ", "na", "Na", "NA", "#DIV/0!"))
na_vars <- sapply(training_full, function(x) {length(which(is.na(x)))})
training_lean <- training_full[ , na_vars < 1000 ]
validation <- validation[ , na_vars < 1000 ]
rfMod <- train(classe ~ ., method = "rf", data = training,
trControl = trainControl(method = "cv", number = 5), prox = T)
set.seed(91660)
library(rpart)
rfMod <- train(classe ~ ., method = "rf", data = training,
trControl = trainControl(method = "cv", number = 5), prox = T)
library(caret)
rfMod <- train(classe ~ ., method = "rf", data = training,
trControl = trainControl(method = "cv", number = 5), prox = T)
intrain <- createDataPartition(training_lean$classe, p = .60, list = F)
training <- training_lean[intrain, ]
testing <- training_lean[-intrain, ]
rfMod <- train(classe ~ ., method = "rf", data = training,
trControl = trainControl(method = "cv", number = 5), prox = T)
training_full <- read.csv("training_full.csv", na.strings= c("", " ", "na", "Na", "NA", "#DIV/0!"))
validation <- read.csv("validation.csv", na.strings= c("", " ", "na", "Na", "NA", "#DIV/0!"))
## inspection of the variables for NA values revealed that many variables are composed almost entirely
## of NA's and could therefore be deleted from the data set without hindering out ability to
## predict
na_vars <- sapply(training_full, function(x) {length(which(is.na(x)))})
training_lean <- training_full[ , na_vars < 1000 ]
validation <- validation[ , na_vars < 1000 ]
## loads caret package and splits the "training_full" dataset
## into two subsets, "training", and "testing"
library(caret)
intrain <- createDataPartition(training_lean$classe, p = .60, list = F)
training <- training_lean[intrain, ]
testing <- training_lean[-intrain, ]
set.seed(91660)
?rfcv
library(randomForests)
library(randomForest)
?rfcv
rfcv(training[,-60], train[[60]], cv.fold=5, scale="log", step=0.75, recursive=F)
rfcv(training[,-60], training[[60]], cv.fold=5, scale="log", step=0.75, recursive=F)
rfMod <- randomForest(classe ~ ., data = training)
names(rfMod)
rfMod[4]
summary(rfMod)
confusionMatrix(rfMod)
names(rfMod)
rfMod[5]
rfPredict <- predict(rfMod, testing)
summary(rfPredict)
confusionMatrix(rfPredict, testing$classe)
rfcv(training[,-60], training[[60]], cv.fold=5, scale="log", step=0.75, recursive=F)
finalPredict <- predict(rfMod, validation)
finalPredict <- predict(rfMod, newdata = validation)
View(validation)
rfMod <- randomForest(classe ~ ., data = training[,-c(1:7)])
rfMod$confusion
training <- training[, -c(1:7) ]
testing <- training[, -c(1:7) ]
validation <- validation[ , -c(1:7)]
finalPredict <- predict(rfMod, validation)
finalPredict
finalPredict <- as.character(predict(rfMod, validation))
class(finalPredict)
finalPredict
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
setwd("~/R/RFiles/MachineLearning/Answers")
pml_write_files(finalPredict)
setwd("~/R/RFiles/MachineLearning")
rfMod$confusion
names(rfMod)
rfMod[[4]]
mean(rfMod[[4]])
names(rfMod)
rfMod[[10]]
rfMod[[19]]
names(rfMod)
?randomForest
randomForest$type
rfMod$type
rfMod$confusion
rfMod <- randomForest(classe ~ ., data = training, prox = T)
names(rfMod)
rfMod[[3]]
names(rfMod)
rfMod[[4]]
names(rfPredict)
?confusionMatrix
confusionMatrix(rfPredict, testing$classe)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(url, destfile = "training_full.csv")
